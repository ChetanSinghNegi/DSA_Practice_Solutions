class Solution {

    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        if(head1==null) return head2;
        if(head2==null) return head1;
        ListNode ans=new ListNode(-1);  //dummy node to make code beautiful
        ListNode tail=ans;
        while(head1!=null && head2!=null){
         if(head1.val<=head2.val){
             tail.next=head1;
             head1=head1.next;
         }else{
             tail.next=head2;
             head2=head2.next;
         }
         tail=tail.next;
     }
     if(head1!=null){
         tail.next=head1;
     }
     if(head2!=null){
         tail.next=head2;
     }

    //  testing
    //  while(ansHead!=null){
    //      System.out.print("  "+ansHead.data);
    //      ansHead=ansHead.next;
    //  }

     return ans.next;  
    }
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode ansNode=helper(lists,0,lists.length-1);
        return ansNode;   
    }
    public ListNode helper(ListNode[] lists,int left,int right){
        if(left==right) return lists[left];
        if(left>right) return null;
        int mid=left+(right-left)/2;
        ListNode leftNode=helper(lists,left,mid);
        ListNode rightNode=helper(lists,mid+1,right);
        return mergeTwoLists(leftNode,rightNode);
        
    }
}