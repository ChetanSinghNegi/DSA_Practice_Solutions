class Solution {
    public ListNode sortList(ListNode left) {
        if(left==null || left.next==null ) return left;
        ListNode mid=middleNode(left);  //finding mid
        ListNode midNext=mid.next;   //storing next of mid
        mid.next=null;   //breaking into two LL
        ListNode leftAns=sortList(left);
        ListNode rightAns=sortList(midNext);
        ListNode ans=mergeTwoLists(leftAns,rightAns);
        return ans;
    }


    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        if(head1==null) return head2;
     if(head2==null) return head1;
     ListNode ans=new ListNode(-1);  //dummy node to make code beautiful
     ListNode head=ans,tail=ans;
     while(head1!=null && head2!=null){
         if(head1.val<=head2.val){
             tail.next=head1;
             head1=head1.next;
         }else{
             tail.next=head2;
             head2=head2.next;
         }
         tail=tail.next;
     }
     if(head1!=null){
         tail.next=head1;
     }
     if(head2!=null){
         tail.next=head2;
     }
    //  while(ansHead!=null){
    //      System.out.print("  "+ansHead.data);
    //      ansHead=ansHead.next;
    //  }
     return ans.next;  //here can use head.next as well
    }

    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        if(head==null) return null;
        while( fast.next!=null  && fast.next.next!=null ){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}