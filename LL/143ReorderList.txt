/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        ListNode left=Middle(head);
        ListNode midNext=left.next;
        left.next=null;
        ListNode reverseNode=reverseList(midNext);
        ListNode c1=head;
        ListNode c2=reverseNode;
        
        
        while(c2!=null) {
            ListNode f1=c1.next;
            ListNode f2=c2.next;
            c1.next=c2;
            c2.next=f1;
            c1=f1;
            c2=f2;
        }
    }
    public ListNode Middle(ListNode head){
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode pre=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode post=curr.next;
            curr.next=pre;
            pre=curr;
            curr=post;
        }
        head=pre;
        return head;
    }
}