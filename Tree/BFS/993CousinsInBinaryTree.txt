//dfs O(n) && S(h)
class Solution {
    int xL,yL,xParent,yParent;
    public boolean isCousins(TreeNode root, int x, int y) {
        xL=0;yL=0;xParent=0;yParent=0;
        dfs(root,x,y,0,0);
        if(xL==yL && xParent!=yParent) return true;
        return false;
    }

    public void dfs(TreeNode root,int x,int y,int parent,int level){
        if(root==null) return;
        if(root.val==x){
            xParent=parent;
            xL=level;
        }
        if(root.val==y){
            yParent=parent;
            yL=level;
        }
        dfs(root.left,x,y,root.val,level+1);
        dfs(root.right,x,y,root.val,level+1);
    }
}


//bfs O(n) && s(n+h)
class Solution {

    class Mover {
        TreeNode node;
        TreeNode parent;
        int level;

        Mover(TreeNode node,TreeNode parent,int level){
            this.node=node;
            this.parent=parent;
            this.level=level;
        }
        Mover(){
            this.node=null;
            this.parent=null;
            this.level=0;
        }
    }

    public boolean isCousins(TreeNode root, int x, int y) {
        Mover xM=new Mover();
        Mover yM=new Mover();
        Queue<Mover> q=new ArrayDeque<>();
        q.add(new Mover(root,null,0));
        while(q.size()>0){
            Mover rem=q.remove();
            if(rem.node.val==x){
                xM.node=rem.node;
                xM.parent=rem.parent;
                xM.level=rem.level;
            }
            if(rem.node.val==y){
                yM.node=rem.node;
                yM.parent=rem.parent;
                yM.level=rem.level;
            }
            if(rem.node.left!=null){
                Mover left=new Mover(rem.node.left,rem.node,rem.level+1);
                q.add(left);
            }
            if(rem.node.right!=null){
                Mover right=new Mover(rem.node.right,rem.node,rem.level+1);
                q.add(right);
            }
        }

        //testing
        // System.out.println(xM.node.val+" "+xM.parent.val+" "+xM.level);
        // System.out.println(yM.node.val+" "+yM.parent.val+" "+yM.level);
        
        if(xM.parent==yM.parent || xM.level!=yM.level) return false;
        return true;

    }
}