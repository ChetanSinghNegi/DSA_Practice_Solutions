/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

//BFS O(n) S(n)
class Solution {
    public Node connect(Node root) {
        if(root==null) return null;

        Queue<Node> q=new ArrayDeque<>();
        Node dummy=new Node(Integer.MIN_VALUE,null,null,null);
        q.add(root);
        q.add(dummy);

        //dummy Node BFS
        while(q.size()>0){
            Node rem=q.remove();
            if(rem==dummy){
                if(q.size()>0){
                    q.add(rem);
                }
                continue;
            }

            //finding nextRight Node of rem
            Node peek=q.peek()==dummy?null:q.peek();
            //assigning next of rem to nextRight found above
            rem.next=peek;

            if(rem.left!=null) q.add(rem.left);
            if(rem.right!=null) q.add(rem.right);
        }
        return root;
    }
}


//BFS O(n) S(1)
class Solution {
    public Node connect(Node root) {
        Node curr=root;
        while(curr!=null){
            Node head=null,tail=null;

            //parent going horizontally right and updating its child to nextRight pointer way
            while(curr!=null){
                if(curr.left!=null){
                    if(head==null){
                        head=tail=curr.left;
                    }else{
                        tail.next=curr.left;
                        tail=tail.next;
                    }
                }
                if(curr.right!=null){
                    if(head==null){
                        head=tail=curr.right;
                    }else{
                        tail.next=curr.right;
                        tail=tail.next;
                    }
                }

                //parent is going horizontally right
                curr=curr.next;
            }

            //going to next Level
            curr=head;
        }
        return root;
    }
}

