/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static int maxDia;
    public int diameterOfBinaryTree(TreeNode root) {
        maxDia=0;
        diameterOfBinaryTreeHelper(root);
        return maxDia;
    }
    public int diameterOfBinaryTreeHelper(TreeNode root){
        if(root==null){
            return -1;
        }
        int h1=diameterOfBinaryTreeHelper(root.left);
        int h2=diameterOfBinaryTreeHelper(root.right);
        int currDia=h1+h2+2;
        if(maxDia<currDia){
            maxDia=currDia;
        }
        return Math.max(h1,h2)+1;

    }
} 