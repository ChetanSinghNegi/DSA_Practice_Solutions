class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        TreeNode root=dfs(postorder,hm,0,postorder.length-1,postorder.length-1);
        return root;
    }
    public TreeNode dfs(int[] postorder,HashMap<Integer,Integer> hm,int inStIdx,int inEndIdx,
    int postIdx){
        if(inStIdx>inEndIdx) return null;

        int currVal=postorder[postIdx];
        int inIdx=hm.get(currVal);
        TreeNode currNode=new TreeNode(currVal);  

        currNode.left=dfs(postorder,hm,inStIdx,inIdx-1,postIdx-1-(inEndIdx-inIdx)); 
        currNode.right=dfs(postorder,hm,inIdx+1,inEndIdx,postIdx-1);
        
        return currNode;
    }
}