/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    
    public String serialize(TreeNode root) {
        StringBuilder str=new StringBuilder("");
        helper(root,str);
        // System.out.println(str);
        return str.toString();
    }
    public void helper(TreeNode root,StringBuilder str){
        if(root==null){
            str.append("null,");
            return;
        } 
        str.append(root.val+",");
        helper(root.left,str);
        helper(root.right,str);

    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals("null,")==true) return null;
        String[] vals=data.split(",");
        Stack<Pair> st=new Stack<>();
        TreeNode root = new TreeNode(Integer.parseInt(vals[0]));
        st.push(new Pair(root));
        
        int idx=1;
        while(idx<vals.length){
            Pair currP=st.peek();
            String currStr=vals[idx];
            if(currStr.equals("null")){
                currP.state+=1;
                idx++;
                if(currP.state==2) st.pop();
            }else{
                TreeNode currN=new TreeNode(Integer.parseInt(currStr));
                if(currP.state==0){
                    currP.node.left=currN;
                    currP.state+=1;
                }else{
                    currP.node.right=currN;
                    st.pop();
                }
                st.push(new Pair(currN));
                idx++;
            }
        }
        
        return root;
    }
    public class Pair{
        TreeNode node;
        int state;

        Pair(TreeNode node){
            this.node=node;
            this.state=0;
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));