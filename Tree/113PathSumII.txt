/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> ans;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ans=new ArrayList<>();
        helper(root,new ArrayList<Integer>() ,targetSum);
        return ans;
    }
    public void helper(TreeNode root,ArrayList<Integer> currList,int targetSum){
        if(root==null) return;
        
        currList.add(root.val);                  //adding curr ele to AL
        
        if(root.left==null && root.right==null) {
            if(root.val==targetSum){
                ans.add(new ArrayList<>(currList));   //deepcopy
            }
            currList.remove(currList.size()-1);  //removing last element of AL
            return;
        }

        helper(root.left,currList,targetSum-root.val);
        helper(root.right,currList,targetSum-root.val);
        currList.remove(currList.size()-1);    //backtracking
        return;
    }
}