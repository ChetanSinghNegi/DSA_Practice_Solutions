class Solution {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        return helper(preorder,postorder,0,preorder.length-1,0,postorder.length-1);
    }

    public TreeNode helper(int[] preOrder, int[] postOrder,int preL,int preR,int poL,int poR){
        if(preL>preR) return null;

        //this is important condition here.Otherwise tree can't be filled properly
        if(preL==preR) return new TreeNode(preOrder[preL]);   

        TreeNode curr=new TreeNode(preOrder[preL]);
        
        //finding range for recursive call 
        if(preL+1<preOrder.length){
            int preNext=preOrder[preL+1];
            int poIdx=find(preNext,postOrder);
            int poLeftCount=poIdx-poL+1;
            curr.left=helper(preOrder,postOrder,preL+1 , preL+poLeftCount,poL,poIdx);
            curr.right=helper(preOrder,postOrder,preL+1+poLeftCount ,preR ,poIdx+1,poR-1);
        }

        return curr;
    }

    public int find(int val,int postOrder[]){
        for(int i=0;i<postOrder.length;i++){
            if(val==postOrder[i]) return i;
        }
        return -1;
    }
}