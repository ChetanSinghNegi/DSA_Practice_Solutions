// tabulation O(n) S(n)
class Solution {
    public int maxProfit(int[] prices) {
        int[] buy = new int[prices.length];
        int[] sell = new int[prices.length];
        buy[0] = -1 * prices[0];
        sell[0] = 0;

        for(int i = 1; i < prices.length; i++){
            buy[i] = Math.max(buy[i - 1], sell[i - 1] - prices[i]);
            sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);
        }
        return sell[prices.length - 1];
    }
}

//Optimized tabulation O(n) S(1)
class Solution {
    public int maxProfit(int[] prices) {
        int buy = -1 * prices[0];
        int sell = 0;

        for(int i = 1; i < prices.length; i++){
            int newBuy = Math.max(buy, sell - prices[i]);
            int newSell = Math.max(sell, buy + prices[i]);
            buy = newBuy;
            sell = newSell;
        }
        return sell;
    }
}

//Greedy O(n) S(1)
class Solution {
    public int maxProfit(int[] prices) {
        int currMin = prices[0];
        int profit = 0;
        for(int i=1; i<prices.length; i++){
            if(currMin < prices[i]){
                profit += prices[i] - currMin;
            }
            currMin = prices[i];
        }
        return profit;
    }
}