
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    
    static class Pair{
        int row,col;
        String psf;
        Pair(int row, int col, String psf){
            this.row = row;
            this.col = col;
            this.psf = psf;
        }
    }
    
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
        int[][] dp = new int[W + 1][n + 1];
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=W; j++){
                int yes = 0;
                if(j >= wt[i - 1]){
                    yes = val[i - 1] + dp[j - wt[i - 1]][i - 1];
                }
                int no = dp[j][i - 1];
                dp[j][i] = Math.max(yes, no);
            }
        }
        
        System.out.println(dp[W][n]);
        
        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(W, n, ""));
        
        while(q.size() > 0){
            Pair rem = q.remove();
            
            if(rem.col == 0){
                System.out.println(rem.psf);
                continue;
            }
            
            if(rem.row >= wt[rem.col - 1]){
                if(dp[rem.row - wt[rem.col - 1]][rem.col - 1] 
                + wt[rem.col - 1] == dp[rem.row][rem.col]){
                    q.add(new Pair(rem.row - wt[rem.col - 1],
                        rem.col - 1, rem.psf + " " + wt[rem.col - 1]));
                }
            }
            
            if(dp[rem.row][rem.col] == dp[rem.row][rem.col - 1]){
                q.add(new Pair(rem.row, rem.col - 1, rem.psf));
            }
            
        }
        
        return dp[W][n];
        
    }
}
