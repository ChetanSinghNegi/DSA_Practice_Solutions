class Solution {
    public int minimumMountainRemovals(int[] nums) {
        int n = nums.length;
        int[] inc = new int[n];
        int[] dec = new int[n];

        //longest increasing Subsequence
        for(int i = 0; i < n; i++){
            inc[i] = 1;
            for(int prev = 0; prev < i; prev++){
                if(nums[i] > nums[prev] && inc[prev] + 1 > inc[i]){
                    inc[i] = inc[prev] + 1;
                }
            }
        }

        //longest decreasing Subsequence
        for(int i = n - 1; i >= 0; i--){
            dec[i] = 1;
            for(int prev = n - 1; prev > i; prev--){
                if(nums[i] > nums[prev] && dec[prev] + 1 > dec[i]){
                    dec[i] = dec[prev] + 1;
                }
            }
        }

        int max = 0;
        for(int i = 0; i < n; i++){
            if(inc[i] == 1 || dec[i] == 1) continue;
            max = Math.max(max, inc[i] + dec[i] - 1);
        }
        // for(int i = 0; i < n; i++){
        //     System.out.print(inc[i]+" ==> "+dec[i] +" ... ");
        // }
        return n - max;
    }
}
