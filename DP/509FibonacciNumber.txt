//memoization solution
class Solution {
    public int fib(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return fibHelper(n, dp);
    }

    public int fibHelper(int n, int[] dp) {
        if (n == 0 || n == 1) {
            return n;
        }
        if (dp[n] != -1)
            return dp[n];
        int n1 = fibHelper(n - 1, dp);
        int n2 = fibHelper(n - 2, dp);
        dp[n] = n1 + n2;
        return dp[n];
    }

}

    // blunt recursion
    public static int fibRec(int n) {
        if (n == 0 || n == 1) {
            return n;
        }

        int x = fibRec(n - 1);
        int y = fibRec(n - 2);
        return x + y;
    }

    // tabular solution
    class Solution {
        public int fib(int n) {
            if (n == 0 || n == 1)
                return n;
            int[] dp = new int[n + 1];
            Arrays.fill(dp, -1);
            dp[0] = 0;
            dp[1] = 1;
            for (int i = 2; i <= n; i++) {
                dp[i] = dp[i - 1] + dp[i - 2];
            }

            return dp[n];
        }
    }

    // space optimized tabular Solution
class Solution {
    public int fib(int n) {
        if(n == 0 || n == 1) return n;
        int first = 0;
        int second = 1;
        for(int i=2;i<=n;i++){
            int curr = first + second;
            first = second;
            second = curr;
        }

        return second;
    }
}