//memoization  O(sum * items)  S(sum * items)
class Solution{

    static int mod = 1000000007;
	public int perfectSum(int arr[],int n, int sum){
	int[][] dp = new int[sum + 1][n];
        for(int i=0; i <= sum; i++){
            Arrays.fill(dp[i],-1);
        }
        return helper(0, sum, dp, arr);
    }
    
    static int helper(int idx, int sum, int[][] dp, int[] arr){
        if(idx == arr.length){
            if(sum == 0) return 1;
            return 0;
        }
        if(dp[sum][idx] != -1) return dp[sum][idx];
        
        int no = helper(idx + 1, sum, dp, arr);
        int yes = (arr[idx] <= sum )?helper(idx + 1, sum - arr[idx], dp, arr):0;
        dp[sum][idx] = (yes + no) % mod;
        return dp[sum][idx];
        
    }   
}

//tabulation O(sum * items)  S(sum * items)
class Solution{

    static int mod = 1000000007;
	public int perfectSum(int arr[],int n, int sum){
	    int[][] dp = new int[n + 1][sum + 1];
        dp[0][0] = 1;
        for(int item = 1;item <= n; item++){
            for(int currSum = 0; currSum <= sum; currSum++){
                int no = dp[item - 1][currSum];
                int yes = currSum >= arr[item - 1]? dp[item - 1][currSum - arr[item - 1]]:0;
                dp[item][currSum] = (no + yes) % mod;
            }
        }
        return dp[n][sum];
        
        
    }   
}

//Optimized tabulation O(sum * items)  S(sum)
class Solution{

    static int mod = 1000000007;
	public int perfectSum(int arr[],int n, int sum){
	    int[] dp = new int[sum + 1];
        dp[0] = 1;
        for(int item = 1;item <= n; item++){
            int[] newDP = new int[sum + 1];
            for(int currSum = 0; currSum <= sum; currSum++){
                int no = dp[currSum];
                int yes = currSum >= arr[item - 1]? dp[currSum - arr[item - 1]]:0;
                newDP[currSum] = (no + yes) % mod;
            }
            dp = newDP;
        }
        return dp[sum];
        
        
    }   
}