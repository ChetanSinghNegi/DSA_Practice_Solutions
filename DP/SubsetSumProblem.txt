//memoization O(sum * items) S(sum * items)
class Solution{

    static Boolean isSubsetSum(int n, int arr[], int sum){
        // code here
        int[][] dp = new int[sum + 1][n];
        for(int i=0; i <= sum; i++){
            Arrays.fill(dp[i],-1);
        }
        int ans = helper(0, sum, dp, arr);
        if(ans == 0) return false;
        return true;
    }
    
    static int helper(int idx, int sum, int[][] dp, int[] arr){
        if(sum == 0){
            return 1;
        }
        if(idx == arr.length){
            return 0;
        }
        if(dp[sum][idx] != -1) return dp[sum][idx];
        
        int no = helper(idx + 1, sum, dp, arr);
        int yes = (arr[idx] <= sum )?helper(idx + 1, sum - arr[idx], dp, arr):0;
        dp[sum][idx] = Math.max(no, yes);
        return dp[sum][idx];
        
    }   
}

//Optimized tabulation O(sum * items) S(sum * items)
class Solution{

    static Boolean isSubsetSum(int n, int arr[], int sum){
        // code here
        boolean[] dp = new boolean[sum + 1];
        dp[0] = true;
        for(int item = 1;item <= n; item++){
            boolean[] newDP = new boolean[sum + 1];
            for(int currSum = 0; currSum <= sum; currSum++){
                boolean no = dp[currSum];
                boolean yes = currSum >= arr[item - 1]? dp[currSum - arr[item - 1]]:false;
                newDP[currSum] = (no || yes);
            }
            dp = newDP;
        }
        
        return dp[sum];
        
    }   
}