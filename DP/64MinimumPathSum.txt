//Memoization O(n*m) S(n*m)
class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        for(int i = 0; i < grid.length; i++){
            Arrays.fill(dp[i], -1);
        }
        
        return helper(0,0, dp, grid);

    }
    public int helper(int row, int col, int[][] dp, int[][] grid){
        if(row >= grid.length || col >= grid[0].length){
            return Integer.MAX_VALUE;
        }
        if(row == grid.length - 1 && col == grid[0].length - 1){
            return grid[row][col];
        }

        if(dp[row][col] != -1) return dp[row][col];
        int right = helper(row, col + 1, dp, grid);
        int down = helper(row + 1, col, dp, grid);
        dp[row][col] = Math.min(right,down) + grid[row][col];

        return dp[row][col];
    }
}

//tabulation O(n * m) S(n * m)
class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length + 1][grid[0].length + 1];
        for(int i=0; i <= grid.length; i++){
            Arrays.fill(dp[i],Integer.MAX_VALUE);
        }
        for(int row = grid.length - 1; row >= 0; row--){
            for(int col = grid[0].length - 1; col >= 0 ; col--){
                if(row == grid.length - 1 && col == grid[0].length - 1){
                    dp[row][col] = grid[row][col];
                    continue;
                }
                dp[row][col] = Math.min(dp[row][col + 1], dp[row + 1][col]) + grid[row][col];
            }
        }
        return dp[0][0];
    }
}

//tabulation O(n * m) S(m)
class Solution {
    public int minPathSum(int[][] grid) {
        int[] dp = new int[grid[0].length + 1];
        for(int i=0; i <= grid[0].length; i++){
            dp[i] = Integer.MAX_VALUE;
        }
        for(int row = grid.length - 1; row >= 0; row--){
            for(int col = grid[0].length - 1; col >= 0 ; col--){
                if(row == grid.length - 1 && col == grid[0].length - 1){
                    dp[col] = grid[row][col];
                    continue;
                }
                dp[col] = Math.min(dp[col + 1], dp[col]) + grid[row][col];
            }
        }
        return dp[0];
    }
}