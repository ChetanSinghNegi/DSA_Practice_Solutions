//Memoization O(n * n) S(n * n)
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[][] dp = new int[n + 1][n + 1];
        for(int i = 0; i <= n; i++){
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        return helper(0, 0, dp, triangle);
    }

    public int helper(int triIdx, int idx, int[][] dp, List<List<Integer>> triangle){
        if(triIdx == triangle.size() - 1){
                return triangle.get(triIdx).get(idx);
        }

        if(dp[triIdx][idx] != Integer.MAX_VALUE){
            return dp[triIdx][idx];
        }

        int down = helper(triIdx + 1, idx, dp, triangle);
        int downRight = helper(triIdx + 1, idx + 1, dp, triangle);
        int ans = Math.min(down, downRight) + triangle.get(triIdx).get(idx);
        dp[triIdx][idx] = ans;
        return ans;
    }
}

//tabulation Optimized O(n * n) S(n)
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[] dp = new int[n];
        for(int i = 0; i < n; i++){
            dp[i] = triangle.get(n - 1).get(i);
        }

        for(int i = n - 2; i >= 0; i--){
            int[] newDP = new int[n];
            for(int j = 0; j < triangle.get(i).size(); j++){
                newDP[j] = Math.min(dp[j],dp[j + 1]) + triangle.get(i).get(j);
            }
            dp = newDP;
        }
        return dp[0];
        
    }

}