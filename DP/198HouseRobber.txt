class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n + 1][2];
        for(int i=0; i<=n; i++){
            Arrays.fill(dp[i],-1);
        }
        int ans = helper(0, 0, nums, dp);
        return ans;
    }

    public int helper(int idx, int prevBroken, int[] nums, int[][] dp){
        if(idx == nums.length) return 0;

        if(dp[idx][prevBroken] != -1) return dp[idx][prevBroken] ;
        int currSum1 = helper(idx + 1, 0, nums, dp);
        if(prevBroken == 0){
            int currSum2 = helper(idx + 1, 1, nums, dp) + nums[idx];
            currSum1 = Math.max(currSum1,currSum2);
        }

        dp[idx][prevBroken] = currSum1;
        return currSum1;

    }
}

//tabultaion
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        for(int i=0;i<n;i++){
            int prevLooted1=i-1>=0?dp[i-1]:0;
            int prevLooted2=i-2>=0?dp[i-2]:0;
            int currAns=prevLooted2+nums[i];
            dp[i]=prevLooted1>currAns?prevLooted1:currAns;
        }
        return dp[n-1];
    }
}

// tabulation space optimized
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int currSafe = 0;
        int currRobbed = 0;
        for(int i = 0; i<n; i++){
            int prevSafe = currSafe;
            currSafe = Math.max(currSafe, currRobbed);
            currRobbed = prevSafe + nums[i];
        }
        return Math.max(currSafe, currRobbed);
    }
}