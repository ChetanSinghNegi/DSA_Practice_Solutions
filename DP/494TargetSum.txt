class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int totalSum = 0;
        for(int item : nums){
            totalSum += item;
        }
        int[][] dp = new int[nums.length][2 * totalSum + 1];
        for(int i = 0; i < nums.length; i++){
            Arrays.fill(dp[i], -1);
        }

        return helper(0, 0, totalSum, target , dp, nums);
    }

    public int helper(int idx, int sum, int totalSum, int target, int[][] dp, int[] nums){
        if(idx == nums.length){
            if(sum == target){
                return 1;
            }
            return 0;
        }

        if(dp[idx][sum + totalSum] != -1) return dp[idx][sum + totalSum];
        int sub = helper(idx + 1, sum - nums[idx], totalSum, target, dp, nums);
        int add = helper(idx + 1, sum + nums[idx], totalSum, target, dp, nums);

        dp[idx][sum + totalSum] = sub + add;
        return sub + add;
    }
}