//tabulation O(n) S(n)
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[] buy = new int[n];
        int[] sell = new int[n];
        int[] cooldown = new int[n];
        buy[0] = -1 * prices[0];
        for(int i = 1; i < n; i++){
            buy[i] = Math.max(buy[i - 1],cooldown[i - 1] - prices[i]);
            sell[i] = Math.max(cooldown[i - 1],buy[i - 1] + prices[i]);
            cooldown[i] = Math.max(sell[i - 1],cooldown[i - 1]);
        }
        return Math.max(cooldown[n - 1], sell[n - 1]);
    }
}

//optimized tabulation O(n) S(1)
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int buy = -1 * prices[0];;
        int sell = 0;
        int cooldown = 0;
        for(int i = 1; i < n; i++){
            int newBuy = Math.max(buy, cooldown - prices[i]);
            int newSell = Math.max(cooldown , buy + prices[i]);
            int newCooldown = Math.max(sell , cooldown);
            buy = newBuy; sell = newSell; cooldown = newCooldown;
        }
        return Math.max(cooldown, sell);
    }
}