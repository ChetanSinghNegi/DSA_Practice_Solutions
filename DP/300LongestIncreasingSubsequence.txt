//Memoization
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length ;
        int[][] dp = new int[n + 1][n + 1];
        for(int i = 0; i <= n; i++){
            Arrays.fill(dp[i], -1);
        }
        int ans = helper(0, -1, dp, nums);
        return ans;
    }

    public int helper(int currIdx, int prevIdx, int[][] dp, int[] nums){
        if(currIdx == nums.length) return 0;

        if(dp[currIdx][prevIdx + 1] != -1){
            return dp[currIdx][prevIdx + 1];
        }


        int yes = (prevIdx == -1 || nums[currIdx] > nums[prevIdx])?helper(currIdx + 1, currIdx, dp, nums) + 1:-1;
        int no = helper(currIdx + 1, prevIdx, dp, nums);
        int ans = Math.max(yes, no);
        if(prevIdx != -1){
            dp[currIdx][prevIdx + 1] = ans;
        }
        return ans;
    }
}

//Tabulation
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length ;
        int[] dp = new int[n];
        int max = 0;
        for(int i = 0;i < n; i++){
            dp[i] = 1;
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            max = Math.max(max, dp[i]);
        }

        return max;

    }
}