class Solution {
    public int minSteps(int n) {
        if(n == 1) return 0;
        long[][] dp = new long[n + 1][n + 1];
        for(int i=0;i<=n;i++){
            Arrays.fill(dp[i],-1);
        }

        int ans = (int)helper(1,1,n,dp);
        // for(int i=0;i<=n;i++){
        //     for(int j=0;j<=n;j++){
        //         System.out.print(dp[i][j]+" ");
        //     }
        //     System.out.println();
        // }
        return 1 + ans;
    }

    public long helper(int ansLen,int copyLen, int dest, long[][] dp){
        if(ansLen > dest || copyLen > dest) return Integer.MAX_VALUE - 4;
        if(ansLen == dest) return 0;

        if(dp[ansLen][copyLen] != -1) return dp[ansLen][copyLen];
        long ans1 = 2 + helper(ansLen * 2, ansLen, dest, dp);
        long ans2 = 1 + helper(ansLen + copyLen, copyLen, dest, dp);
        dp[ansLen][copyLen] = Math.min(ans1, ans2);
        return dp[ansLen][copyLen];
    }
}