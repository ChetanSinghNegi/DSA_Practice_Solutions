class Solution {
    public int change(int amount, int[] coins) {
        int[] dp=new int[amount+1];
        dp[0]=1;
        int n=coins.length;
        for(int i=0;i<n;i++){
            for(int j=1;j<=amount;j++){
                dp[j] = dp[j] + (j - coins[i] >= 0?dp[j - coins[i]]: 0);
            }
        }
        return dp[amount];
    }
}

//Memoization O(amount * coins) S(n)
class Solution {
    public int change(int amount, int[] coins) {
        int[][] dp = new int[amount + 1][coins.length];
        for(int i=0;i<= amount; i++){
            Arrays.fill(dp[i], -1);
        }
        int ans = helper(amount, 0, dp, coins);
        return ans == -1?0:ans;
    }
    public int helper(int amount, int coinIdx, int[][] dp, int[] coins){
        if(amount < 0) return 0;
        if(amount == 0) return 1;

        if(dp[amount][coinIdx] != -1) return dp[amount][coinIdx];
        int combinations = 0;
        for(int j = coinIdx; j < coins.length; j++){
            int combination = helper(amount - coins[j], j, dp, coins);
            combinations += combination;
        }
        dp[amount][coinIdx] = combinations;
        return combinations;
    }

}