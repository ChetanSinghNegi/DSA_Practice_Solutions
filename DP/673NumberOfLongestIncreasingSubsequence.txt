//Tabulation O(n2) S(1)
class Solution {
    public int findNumberOfLIS(int[] nums) {
        int n = nums.length;
        int[] dpLen = new int[n];
        int[] dpCountLIS = new int[n];
        int maxLISLen = 1;

        for(int i = 0; i < n; i++){
            dpLen[i] = 1;
            int count = 1;
            for(int prev = 0; prev < i; prev++){
                if(nums[i] > nums[prev] && dpLen[prev] + 1 > dpLen[i]){
                    dpLen[i] = dpLen[prev] + 1;
                    count = dpCountLIS[prev];
                }else if(nums[i] > nums[prev] && dpLen[prev] + 1 == dpLen[i]){
                    count += dpCountLIS[prev];
                }
            }
            maxLISLen = Math.max(maxLISLen, dpLen[i]);
            dpCountLIS[i] = count;
        }

        int tCount = 0;
        for(int i = 0; i < n; i++){
            if(dpLen[i] == maxLISLen){
                tCount += dpCountLIS[i];
            }
        }


        return tCount;
    }
}