//DP O(n3) S(n2)
class Solution {
    public boolean isValid(String s){
        int left = 0;
        int right = s.length() - 1;
        while(left <= right){
            if(s.charAt(left) != s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
    public String longestPalindrome(String text1) {
        int n = text1.length();
        StringBuilder temp = new StringBuilder(text1);
        String text2 = temp.reverse().toString();
        int maxLen = 0;
        int idx = -1;
        int[][] dp = new int[n + 1][n + 1];
        for(int i = n - 1; i >= 0; i--){
            for(int j = n - 1 ; j >= 0; j--){
                if(text1.charAt(i) == text2.charAt(j) ){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
                if(dp[i][j] > maxLen){
                    boolean isPalindromicString = isValid(text1.substring(i,i + dp[i][j]));
                    if(isPalindromicString == true){
                        maxLen = dp[i][j];
                        idx = i;
                    }
                }
            }
        }
        
        if(maxLen == 0) return "";
        return text1.substring(idx,idx + maxLen);
    }
}

//Expand Around Center O(n2) S(1)
class Solution {
  public String longestPalindrome(String s) {
    String ans = "";

    //odd len palindromic susbtring
    for(int i = 0; i < s.length(); i++){
        int currLen = 1;
        int left = i - 1;
        int right = i + 1;
        while(left >= 0 && right <s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
            currLen += 2;
        }
        
        if(currLen > ans.length()){
            ans = s.substring(left + 1, right);
        }
    }

    //even Len palindromic substring
    for(int i = 0; i < s.length() - 1; i++){
        if(s.charAt(i) == s.charAt(i + 1)){
            int currLen = 2;
            int left = i - 1;
            int right = i + 2;
            while(left >= 0 && right <s.length() && s.charAt(left) == s.charAt(right)){
                left--;
                right++;
                currLen += 2;
            }
            if(currLen > ans.length()){
                ans = s.substring(left + 1, right);
            }
        }
        
    }
      
    return ans;
  }
}