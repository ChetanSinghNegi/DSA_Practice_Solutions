//O(n*m ) + O(n + m)  ,, S(n * m)
class Solution {
    String ans = "";
    public String shortestCommonSupersequence(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        int[][] dp = new int[n + 1][m + 1];
        for(int i = n - 1; i >= 0; i--){
            for(int j = m - 1; j >= 0; j--){
                if(str1.charAt(i) == str2.charAt(j)){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }else{
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        backtracking(0, 0, "", str1, str2, dp);
        return ans;
    }

    public void backtracking(int idx1, int idx2, String currAns, String str1, String str2, int[][] dp){
        if(idx1 == str1.length() && idx2 == str2.length()){
            ans = currAns;
            return;
        }
        char ch1 = idx1 < str1.length()? str1.charAt(idx1): 'A';
        char ch2 = idx2 < str2.length()? str2.charAt(idx2): 'B';
        if(ch1 == ch2){
            backtracking(idx1 + 1, idx2 + 1, currAns + ch1, str1, str2, dp);
        }else if( idx1 < str1.length() && dp[idx1][idx2] == dp[idx1 + 1][idx2]){
            backtracking(idx1 + 1, idx2, currAns + ch1, str1, str2, dp);
        }else{
            backtracking(idx1, idx2 + 1, currAns + ch2, str1, str2, dp);
        }
    }
}