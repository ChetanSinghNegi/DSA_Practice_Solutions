// Recursive code not working due to TLE O(3^n * m)  S(n * m)
class Solution {
    int maxCount ;
    public int findLength(int[] nums1, int[] nums2) {
        maxCount = 0;
        helper(0, 0, 0, nums1, nums2);
        return maxCount;
    }

    public void helper(int idx1, int idx2, int currLen, int[] nums1, int[] nums2){
        maxCount = Math.max(currLen, maxCount);
        if(idx1 == nums1.length || idx2 == nums2.length){
            return;
        }

        if(nums1[idx1] == nums2[idx2]){
            helper(idx1 + 1, idx2 + 1, currLen + 1, nums1, nums2);
        }
        helper(idx1 + 1, idx2, 0, nums1, nums2);
        helper(idx1, idx2 + 1, 0, nums1, nums2);
    }
}

//tabulation O(n * m) S(n * m)
class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int[][] dp = new int[n + 1][m + 1];
        int maxSubarray = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = m - 1; j >= 0; j--){
                if(nums1[i] == nums2[j]){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
                maxSubarray = Math.max(maxSubarray, dp[i][j]);
            }
        }
        return maxSubarray;

    }
}