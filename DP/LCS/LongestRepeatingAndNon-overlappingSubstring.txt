class Solution {
    static String longestSubstring(String s, int n) {
        // code here
        int[][] dp = new int[n + 1][n + 1];
        int row = 0;
        int maxLen = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(s.charAt(i) == s.charAt(j) && i != j){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
                if(Math.min(i, j) + dp[i][j] - 1 >= Math.max(i, j)){
                    dp[i][j] = 0;
                }
                if(maxLen <= dp[i][j]){
                    maxLen = dp[i][j];
                    row = i;
                }
            }
        }
        if(maxLen == 0) return "-1";
        return s.substring(row,row + maxLen);
    }
};