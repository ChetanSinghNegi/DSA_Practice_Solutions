class Solution {
    public int minDistance(String word1, String word2) {
        int[][] dp = new int[word1.length() + 1][word2.length() + 2];
        for(int i = 0; i <= word1.length(); i++){
            Arrays.fill(dp[i], -1);
        }
        return helper(0, 0, word1, word2, dp);

    }

    public int helper(int idx1, int idx2, String s1, String s2, int[][] dp){
        if(idx1 == s1.length() && idx2 == s2.length()) return 0;
        if(idx1 == s1.length()) return s2.length() - idx2;
        if(idx2 == s2.length()) return s1.length() - idx1;

        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];

        char ch1 = s1.charAt(idx1); 
        char ch2 = s2.charAt(idx2); 
        if(ch1 == ch2) return dp[idx1][idx2] = helper(idx1 + 1, idx2 + 1, s1, s2, dp);
        else{
            int replace = helper(idx1 + 1, idx2 + 1, s1, s2, dp);
            int delete = helper(idx1 + 1, idx2, s1, s2, dp);
            int insert = helper(idx1, idx2 + 1, s1, s2, dp);
            int ans = Math.min(replace, Math.min(delete, insert)) + 1;
            return dp[idx1][idx2] = ans;
        }
    }
}