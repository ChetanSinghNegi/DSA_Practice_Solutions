class Solution {
    public String longestDupSubstring(String s) {
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        int maxLen = 0;
        int row = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(s.charAt(i) == s.charAt(j) && i != j){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
                if(dp[i][j] > maxLen){
                    maxLen = dp[i][j];
                    row = i;
                }
            }
        }
        StringBuilder sb = new StringBuilder("");
        // while(maxLen != 0){
        //     sb.append(s.charAt(row));
        //     row = row + 1;
        //     col = col + 1;
        //     maxLen = dp[row][col];
        // }
        return s.substring(row, row + maxLen);
    }
}