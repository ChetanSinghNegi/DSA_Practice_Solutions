
class Solution
{
    
    TreeSet<String> hs;
    public List<String> all_longest_common_subsequences(String text1, String text2)
    {
        List<String> ans = new ArrayList<>();
        hs = new TreeSet<>();
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n + 1][m + 1];
        for(int i = n - 1; i >= 0; i--){
            for(int j = m - 1 ; j >= 0; j--){
                if(text1.charAt(i) == text2.charAt(j)){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }else{
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }
        
        dfs(0,0, "", dp, text1, text2);
        for(String str: hs){
            ans.add(str);
        }
        return ans;
    }
    
    public void dfs(int idx1, int idx2, String psf, int[][] dp, String text1, String text2){
        if(idx1 == text1.length() || idx2 == text2.length()){
            hs.add(psf);
            return;
        }
        
        char ch1 = text1.charAt(idx1);
        char ch2 = text2.charAt(idx2);
        if(ch1 == ch2){
            dfs(idx1 + 1, idx2 + 1, psf + ch1, dp, text1, text2);
        }else{
            if(dp[idx1][idx2 + 1] == dp[idx1][idx2]){
                dfs(idx1, idx2 + 1, psf, dp, text1, text2);
            }
            if(dp[idx1 + 1][idx2] == dp[idx1][idx2]){
                dfs(idx1 + 1, idx2, psf, dp, text1, text2);
            }
        }
        return;
        
    }
}