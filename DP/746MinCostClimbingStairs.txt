//Memoization
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int[] dp = new int[n + 1];
        Arrays.fill(dp,-1);
        dp[n] = 0;
        helper(0, cost, dp);
        return Math.min(dp[0], dp[1]);

    }

    public int helper(int idx, int[] cost, int[] dp){
        if(idx >= dp.length) return Integer.MAX_VALUE;
        if(dp[idx] != -1) return dp[idx];
        int oneStairsUp = helper(idx + 1, cost, dp);
        int twoStairsUp = helper(idx + 2, cost, dp);
        dp[idx] = Math.min(oneStairsUp, twoStairsUp) + cost[idx];
        return dp[idx];
    }
}

//tabular
class Solution {
    public int minCostClimbingStairs(int[] cost) {
    int n=cost.length;
    int dp[]=new int[n];
    dp[0]=cost[0];
    dp[1]=cost[1];
    for(int i=2;i<n;i++){
        dp[i]=Math.min(dp[i-1],dp[i-2])+cost[i];
    }
    
    return Math.min(dp[n-1],dp[n-2]);
    }
}


//space optimized tabular
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int oneStairsUpCost = cost[n - 1];
        int twoStairsUpCost = 0;
        for(int i = n-2; i>=0; i--){
            int currCost = Math.min(oneStairsUpCost,twoStairsUpCost) + cost[i];
            twoStairsUpCost = oneStairsUpCost;
            oneStairsUpCost = currCost;
        }
        return Math.min(oneStairsUpCost, twoStairsUpCost);
    }
}