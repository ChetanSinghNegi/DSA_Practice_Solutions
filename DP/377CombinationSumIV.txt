//Memoization
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target + 1];
        Arrays.fill(dp, -1);
        return helper(target, dp, nums);
    }

    public int helper(int target, int[] dp, int[] nums){
        if(target == 0) return 1;
        if(dp[target] != -1) return dp[target];

        int count = 0;
        for(int i=0; i<nums.length; i++){
            if(target - nums[i] >= 0){
            count += helper(target - nums[i], dp, nums);
            }
        }
        dp[target] = count;
        return count;
    }

}

//tabulation
class Solution {
    public int combinationSum4(int[] nums, int amount ) {
        int[] dp=new int[amount+1];
        dp[0]=1;
        int n=nums.length;
        for(int i=1;i<=amount;i++){
            int combinations = 0;
            for(int j=0;j<n;j++){
                combinations = combinations + (i - nums[j] >= 0?dp[i - nums[j]]: 0);
            }
            dp[i] = combinations;
        }
        return dp[amount];
    }
}