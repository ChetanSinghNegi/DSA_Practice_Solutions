//short and crispy Method and good timeComplexity
class Solution {
    public int twoCitySchedCost(int[][] costs) {
        Arrays.sort(costs,(x,y)-> ((y[1]-y[0]) - (x[1]-x[0])));
        int total=0;
        for(int i=0;i<costs.length/2;i++){
            total+=costs[i][0];
            total+=costs[costs.length-1-i][1];
        }
        return total;
    }
}




//Long Method and bad timeComplexity
class Solution {
    public class pair{
        int diff;
        int idx;
        pair(int d,int i){
            diff=d;
            idx=i;
        }
    }
    public static class myComp implements Comparator<pair> {
        public int compare(pair p1,pair p2){
            return p1.diff-p2.diff;
        }
    }
    public int twoCitySchedCost(int[][] costs) {
        int n=costs.length;
        pair[] ans=new pair[n];
        for(int i=0;i<n;i++){
            int diff=costs[i][1]-costs[i][0];
            pair p=new pair(diff,i);
            ans[i]=p;
        }
        Arrays.sort(ans,new myComp());
        int total=0;
        for(int i=0;i<n;i++){
            if(i<n/2){
                total+=costs[ans[i].idx][1];
            }else{
                total+=costs[ans[i].idx][0];
            }
        }
        return total;
    }
}