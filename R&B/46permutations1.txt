class Solution {
  public List<List<Integer>> permute(int[] nums) {
      List<List<Integer>> permutations =new ArrayList<>();
      List<Integer> permutation =new ArrayList<>();
      boolean [] b=new boolean[nums.length];
      permuteHelper(permutations,permutation,nums,b);
      return permutations;
  }
  public void permuteHelper(List<List<Integer>> permutations ,List<Integer> permutation ,int[] nums ,boolean [] b){
      if(permutation.size()==nums.length){
          List<Integer> copy=new ArrayList<>(permutation);
          permutations.add(copy);
          return;
      }
      for(int i=0;i<nums.length;i++){
          if(b[i]==false){
              b[i]=true;
              permutation.add(nums[i]);
              permuteHelper(permutations,permutation,nums,b);
              permutation.remove(permutation.size()-1);
              b[i]=false;
          }
      }
  }
}