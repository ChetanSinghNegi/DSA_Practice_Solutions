class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length>nums2.length){
            return findMedianSortedArrays(nums2,nums1);
        }
        int left=0;
        int right=nums1.length;
        int totalLength=nums1.length+nums2.length;
        int N=(totalLength+1)/2;
        while(left<=right){
            int mid=left+(right-left)/2;
            int nums1Left=(mid-1>=0)?nums1[mid-1]:Integer.MIN_VALUE;
            int nums1Right=(mid<nums1.length)?nums1[mid]:Integer.MAX_VALUE;
            int nums2Left=(N-mid-1>=0)?nums2[N-mid-1]:Integer.MIN_VALUE;
            int nums2Right=(N-mid<nums2.length)?nums2[N-mid]:Integer.MAX_VALUE;

            if(nums1Left<=nums2Right && nums1Right>=nums2Left){
                if(totalLength % 2 == 1){
                    // odd elements
                    return Math.max(nums1Left, nums2Left);
                } else{
                    int[] arr = {nums1Left, nums1Right, nums2Left, nums2Right};
                    Arrays.sort(arr);
                    return (arr[1] + arr[2]) / 2.0;
                }
            }else if(nums1Right<nums2Left){
                left=mid+1;
            }else{
                right=mid-1;
            }   
        }
        return 0.0;
    }
}