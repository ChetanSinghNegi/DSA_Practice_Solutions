class MyCircularDeque {
    int f=0,r=0;
    int[] deque;
    int size,capacity;

    public MyCircularDeque(int k) {
        capacity=k;    
        deque=new int[capacity];
        size=0;
    }
    
    public boolean insertFront(int value) {
        if(isFull()==true) return false;

        f=f-1<0?f-1+capacity:f-1;
        deque[f]=value;
        size++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(isFull()==true) return false;

        deque[r]=value;
        r=(r+1>=capacity)?0:r+1;
        size++;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty()==true) return false;
        

        f=f+1>=capacity?0:f+1;
        size--;
        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty()==true) return false;

        r=r-1<0?capacity-1:r-1;
        size--;
        return true;
    }
    
    public int getFront() {
        if(isEmpty()==true) return -1;
        
        return deque[f];
    }
    
    public int getRear() {
        if(isEmpty()==true) return -1;

        return deque[r-1<0?capacity-1:r-1];
    }
    
    public boolean isEmpty() {
        if(size==0) return true;
        return false;
    }
    
    public boolean isFull() {
        if(size==capacity) return true;

        return false;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */