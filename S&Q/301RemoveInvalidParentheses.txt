class Solution {
    HashSet<String> ans;
    public List<String> removeInvalidParentheses(String s) {
        ans=new HashSet<>();
        int open=0,close=0;
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='(') open++;
            else if(ch==')'){
                if(open>0) open--;
                else close++;
            }
        }
        helper(s,"",open,close,0);
        List<String> li=new ArrayList<>();
        for(String str:ans){
            li.add(str);
        }
        return li;
    }
    public void helper(String input,String output,int open,int close,int unbalanced){
        if(input.length()==0){

            //interesting concept of unbalanced int 
            if(open==0 && close==0 && unbalanced==0){
                ans.add(output);
            }
            return ;
        }
        String rest=input.substring(1);
        char ch=input.charAt(0);
        if(ch=='('){

            //delete only if open>0
            if(open>0) helper(rest,output,open-1,close,unbalanced);

            //take everytime 
            helper(rest,output+ch,open,close,unbalanced+1);
        }else if(ch==')'){

            //delete only if close>0
            if(close>0) helper(rest,output,open,close-1,unbalanced);

            //take if unbalanced>0 means we have open braces in input
            if(unbalanced>0) helper(rest,output+ch,open,close,unbalanced-1);
        }else{

            //take everytime if alphabet comes
            helper(rest,output+ch,open,close,unbalanced);
        }
    }


}