class Solution {
    public int sumSubarrayMins(int[] arr) {
        int n=arr.length;        
        long[] nse=nse(arr);
        long[] pse=pse(arr);
        long ans=0;
        for(int i=0;i<n;i++){
            long curr=arr[i]*(nse[i]-i)*(i-pse[i]);
            ans+=curr;
        }
        ans=ans%1000000007l;
        return (int)ans;
    }

    //next smaller element duplicate allowed
    public long[] nse(int[] arr){
        int n=arr.length;
        Stack<Integer> st=new Stack<>();
        long [] ans=new long[n];
        for(int i=n-1;i>=0;i--){
            while(st.size()>0 && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.size()>0) ans[i]=st.peek();
            else ans[i]=n;
            st.push(i);
        }
        return ans;
    }

    //previous smaller element duplicate not allowed
    public long[] pse(int[] arr){
        int n=arr.length;
        Stack<Integer> st=new Stack<>();
        long [] ans=new long[n];
        for(int i=0;i<n;i++){
            while(st.size()>0 && arr[st.peek()]>arr[i]){
                st.pop();
            }
            if(st.size()>0) ans[i]=st.peek();
            else ans[i]=-1;
            st.push(i);
        }
        return ans;
    }

}