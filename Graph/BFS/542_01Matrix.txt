class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int[][] ans=new int[m][n];
        Queue<Pair> q=new ArrayDeque<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==0){
                    q.add(new Pair(i,j,0));
                }
            }
        }
        boolean[][] vis=new boolean[m][n];
        while(q.size()>0){
            Pair rem=q.remove();
            if(rem.sr>=m || rem.sr<0 || rem.sc>=n || rem.sc<0 || vis[rem.sr][rem.sc]==true) continue;
            if(mat[rem.sr][rem.sc]==0) rem.level=0;
            else if(mat[rem.sr][rem.sc]==1) ans[rem.sr][rem.sc]=rem.level;
            vis[rem.sr][rem.sc]=true;
            // else if(ans[rem.sr][rem.sc]>rem.level) ans[rem.sr][rem.sc]=rem.level;
            q.add(new Pair(rem.sr - 1,rem.sc,rem.level+1));
            q.add(new Pair(rem.sr,rem.sc - 1,rem.level+1));
            q.add(new Pair(rem.sr + 1,rem.sc,rem.level+1));
            q.add(new Pair(rem.sr,rem.sc+1,rem.level+1));
        }

        return ans;
    }
    class Pair {
        int sr,sc,level;
        Pair(int sr,int sc,int level){
            this.sr=sr;
            this.sc=sc;
            this.level=level;
        }
    }
}