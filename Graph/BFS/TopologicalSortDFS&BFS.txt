
class Solution
{
    //Function to return list containing vertices in Topological order. 
    
    static int idx;
    static int[] ans;
    static int[] kahnAlgo(int V, ArrayList<ArrayList<Integer>> adj){
        ans=new int[V];
        idx=0;
        int[] inc=new int[V];
        
        // outgoing edges freq of nodes array 
        for(int i=0;i<V;i++){
            for(int nbr:adj.get(i)){
                inc[nbr]++;
            }
        }
        Queue<Integer> q=new ArrayDeque<>();
        for(int i=0;i<V;i++){
            if(inc[i]==0){
                q.add(i);
            }
        }
        
        //eleminating incoming edges from remove node
        while(q.size()>0){
            int rem=q.remove();
            for(int nbr:adj.get(rem)){
                inc[nbr]--;
                if(inc[nbr]==0){
                    q.add(nbr);
                }
            }
            ans[idx++]=rem;
        }
        return ans;
    }
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        
        //DFS
        boolean[] vis=new boolean[V];
        idx=V-1;
        ans=new int[V];
        for(int i=0;i<V;i++){
            DFS(i,vis,adj);
        }
        return ans;

        //BFS
        // return kahnAlgo(V,adj);
        
    }
    static void DFS(int src, boolean[] vis , ArrayList<ArrayList<Integer>> adj){
        if(vis[src]==true) return;
        
        vis[src]=true;
        for(int nbr:adj.get(src)) DFS(nbr,vis,adj);
        ans[idx--]=src;
    }
}
