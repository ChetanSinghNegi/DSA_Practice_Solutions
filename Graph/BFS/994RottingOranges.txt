class Solution {
    
    public class Pair{
        int sr;
        int sc;
        int time;
        Pair(int sr,int sc,int time){
            this.sr=sr;
            this.sc=sc;
            this.time=time;
        }
    }
    
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;

        Queue<Pair> q=new ArrayDeque<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2) q.add(new Pair(i,j,0));
            }
        }
        int[][] dir={{-1,0},{0,1},{1,0},{0,-1}};
        int maxTime=0;

        while(q.size()>0){
            Pair rem=q.remove();
            if(grid[rem.sr][rem.sc]==-1) continue; //Already visited
            grid[rem.sr][rem.sc]=-1;  //visiting first time
            maxTime=Math.max(maxTime,rem.time );  // maxTime Required
            
            for(int j=0;j<4;j++){
                int sr=rem.sr+dir[j][0];
                int sc=rem.sc+dir[j][1];
                if(sr>=m || sr<0 || sc>=n || sc<0 || 
                        grid[sr][sc]==-1 || grid[sr][sc]==0 || grid[sr][sc]==2) continue;
                q.add(new Pair(sr,sc,rem.time+1));
            }
        }

        //checking for no fresh fruit left in grid
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) return -1;
            }
        }
        return maxTime;
    }
}