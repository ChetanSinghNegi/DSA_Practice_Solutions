class Solution {
    public class Graph{
        ArrayList<Integer>[] adj;

        Graph(int n){
            adj=new ArrayList[n];
            for(int i=0;i<n;i++){
                adj[i]=new ArrayList<>();
            }
        }
        void addEdge(int src,int dest){
            adj[src].add(dest);
        }
        
        boolean BFS(){
            int[] inc=new int[adj.length];
            for(int i=0;i<adj.length;i++){
                for(int nbr:adj[i]){
                    inc[nbr]++;
                }
            }
            Queue<Integer> q=new ArrayDeque<>();
            for(int i=0;i<adj.length;i++){
                if(inc[i]==0){
                    q.add(i);
                }
            }
            int idx=0;
            while(q.size()>0){
                int rem=q.remove();
                for(int nbr:adj[rem]){
                    inc[nbr]--;
                    if(inc[nbr]==0) q.add(nbr);
                }
                idx++;
            }
            if(idx==adj.length) return true;
            return false;
        }
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Graph g=new Graph(numCourses);
        for(int i=0;i<prerequisites.length;i++){
            g.addEdge(prerequisites[i][1], prerequisites[i][0]);
        }
        
        return g.BFS();
    }
    
}