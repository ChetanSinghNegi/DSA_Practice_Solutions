class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        
        //int[] vis=new int[V];
        //Arrays.fill(vis,-1);
        //for(int i=0;i<V;i++){
        //    if(isCycleDFS(i,adj,vis)==true) return true;
        //}
        //return false;

        return isCycleBFS(V,adj);
        
    }
    
    //-1 not visited
    //0 is visited with same path
    //1 is visited with different path
    public boolean isCycleDFS(int src, ArrayList<ArrayList<Integer>> adj, int[] vis){
        if(vis[src]==0) return true;  //same path visited so cycle
        if(vis[src]==1) return false; //different path visited so not a cycle 
        
        //current path begins
        vis[src]=0;
        
        for(Integer nbr:adj.get(src)){
            if(isCycleDFS(nbr,adj,vis)==true) return true;   
        }
        
        //this path ends
        vis[src]=1;
        return false;
    }

    public boolean isCycleBFS(int n, ArrayList<ArrayList<Integer>> adj){
        int[] inc=new int[n];
        for(int i=0;i<n;i++){
            for(Integer nbr:adj.get(i)){
                inc[nbr]++;
            }
        }
        
        Queue<Integer> q=new ArrayDeque<>();
        for(int i=0;i<n;i++){
            if(inc[i]==0) q.add(i);
        }
        
        int count=0;
        while(q.size()>0){
            int rem=q.remove();
            count++;
            for(Integer nbr:adj.get(rem)){
                inc[nbr]--;
                if(inc[nbr]==0){
                    q.add(nbr);
                }
            }
        }
        
        //if topological sorted array not fully filled means there was a cycle
        if(count!=n) return true;
        //else topological sorted array fully filled so no cycle 
        return false;
    }
}