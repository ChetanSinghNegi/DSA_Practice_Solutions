class Solution {
    static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int source) {
        // Write your code here
        int[] ans=new int[V];
        Arrays.fill(ans,100000000);
        ans[source]=0;
        for(int i=1;i<V;i++){
            for(ArrayList<Integer> edge:edges){
                int src=edge.get(0);
                int dest=edge.get(1);
                int edgeWeight=edge.get(2);
                
                if(ans[src] == 100000000) continue;
                ans[dest]=Math.min(ans[dest],ans[src]+edgeWeight);
                
            }
        }
        
        // checking negative weight cycle in graph
        for(ArrayList<Integer> edge:edges){
            int src=edge.get(0);
            int dest=edge.get(1);
            int edgeWeight=edge.get(2);
            if(ans[src] == 100000000) continue;
            if(ans[src] + edgeWeight < ans[dest]){
                int[] negativeCycle={-1};
                return negativeCycle;
            }
        }
        
        
        return ans;
    }
}