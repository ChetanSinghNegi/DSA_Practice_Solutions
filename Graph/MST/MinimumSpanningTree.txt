@SuppressWarnings("unchecked")
class Solution{
    static class Pair implements Comparable<Pair>{
        int node,weight;
        Pair(int node,int weight){
            this.node=node;
            this.weight=weight;
        }
        public int compareTo(Pair o){
            return this.weight - o.weight;
        }
    }
	static int spanningTree(int V, int E, int edges[][]){
	    ArrayList<Pair>[] graph=new ArrayList[V];
	    for(int i=0;i<V;i++){
	        graph[i]=new ArrayList<Pair>();
	    }
	    for(int i=0;i<E;i++){
	        graph[edges[i][0]].add(new Pair(edges[i][1],edges[i][2]));
	        graph[edges[i][1]].add(new Pair(edges[i][0],edges[i][2]));
	    }
	    
	    PriorityQueue<Pair> pq=new PriorityQueue<>();
	    pq.add(new Pair(0,0));
	    int totalCost=0;
	    boolean[] vis=new boolean[V];
	    while(pq.size()>0){
	        Pair rem=pq.remove();
	        if(vis[rem.node]==true) continue;
	        totalCost+=rem.weight;
	        vis[rem.node]=true;
	        for(Pair nbr:graph[rem.node]){
	            pq.add(new Pair(nbr.node,nbr.weight));
	        }
	    }
	    return totalCost;
	}
}