import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {

    public static class Pair implements Comparable<Pair>{
        int node,cost;
        Pair(int node, int cost){
            this.node = node;
            this.cost = cost;
        }

        public int compareTo(Pair o){
            return this.cost - o.cost;
        }
    }

    public static int supplyWater(int n, int k, int[] wells, int[][] pipes) {
        // Write your code here
        ArrayList<Pair>[] graph=new ArrayList[n+1];
        for(int i=0;i<=n;i++){
            graph[i]=new ArrayList<>();
        }

        for(int i=0;i<n;i++){
            graph[0].add(new Pair(i+1,wells[i]));
            graph[i+1].add(new Pair(0,wells[i]));
        }

        for(int i=0;i<pipes.length;i++){
            graph[pipes[i][0]].add(new Pair(pipes[i][1],pipes[i][2]));
            graph[pipes[i][1]].add(new Pair(pipes[i][0],pipes[i][2]));
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>();
        pq.add(new Pair(0,0));

        boolean[] vis=new boolean[n+1];
        int cost=0;
        while(pq.size() > 0){
            Pair rem=pq.remove();
            if(vis[rem.node]==true) continue;
            vis[rem.node]=true;
            cost+=rem.cost;
            for(Pair nbr:graph[rem.node]){
                pq.add(new Pair(nbr.node,nbr.cost));
            }
        }
        return cost;

    }
    
}