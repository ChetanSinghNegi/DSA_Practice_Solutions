class Solution {
    public static class Pair implements Comparable<Pair>{
        int node;
        double weight;
        Pair(int node,double weight){
            this.node=node;
            this.weight=weight;
        }
        @Override
        public int compareTo(Pair other){
            if(other.weight > this.weight ) return 1;
            if(other.weight == this.weight ) return 0;
            return -1;
        }
    }

    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end){
        ArrayList<Pair>[] graph=new ArrayList[n];
        for(int i=0;i<n;i++){
            graph[i]=new ArrayList<Pair>();
        }
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(new Pair(edges[i][1],succProb[i]));
            graph[edges[i][1]].add(new Pair(edges[i][0],succProb[i]));
        }
        PriorityQueue<Pair> q=new PriorityQueue<>();
        boolean[] vis=new boolean[n];
        q.add(new Pair(start,1.0));
        while(q.size()>0){
            Pair rem=q.remove();
            if(rem.node==end) return rem.weight;
            if(vis[rem.node]!=false){
                continue;
            }
            vis[rem.node]=true;
            for(Pair nbr:graph[rem.node]){
                q.add(new Pair(nbr.node,rem.weight * nbr.weight));
            }
        }
        return 0;
    }
}