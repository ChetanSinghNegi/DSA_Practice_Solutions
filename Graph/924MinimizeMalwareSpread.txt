class Solution {
    int size,infected;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        HashSet<Integer> hs=new HashSet<>();
        for(int i:initial){
            hs.add(i);
        }
        boolean[] vis=new boolean[graph.length];
        int maxSize=-1;
        Arrays.sort(initial);
        int tarInfected=initial[0];

        //finding connected component from src in initial array
        for(int src:initial){
            if(vis[src]==false){
                infected=size=0;
                DFS(src,vis,graph,hs);
                if(maxSize<size && infected == 1){
                    maxSize=size;
                    tarInfected=src;
                }
            } 
        }
        return tarInfected;
    }


    public void DFS(int src,boolean[] vis,int[][] graph,HashSet<Integer> hs){
        if(vis[src]==true) return;

        //increasing size of component
        size++;

        vis[src]=true;

        //increasing infected count in component
        if(hs.contains(src)==true) infected++;
        for(int i=0;i<graph[0].length;i++){
            if(graph[src][i]==1) DFS(i,vis,graph,hs);
        }
    }
}