class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        //boolean[] vis=new boolean[V];
        //for(int i=0;i<V;i++){
        //    if(vis[i]==false){
        //        boolean cycleDetected=isCycleDFS(i,-1,adj,vis);
        //        if(cycleDetected==true) return true;
        //    }
        //}
        // return false;
        
        for(int i=0;i<V;i++){
            if(vis[i]==false){
                boolean cycleDetected=isCycleBFS(i,adj,vis);
                if(cycleDetected==true) return true;
            }
        }
        return false;
        
    }
    public boolean isCycleBFS(int src,
         ArrayList<ArrayList<Integer>> adj, boolean[] vis){
            
        Queue<Integer> q=new ArrayDeque<>();
        q.add(src);
        while(q.size()>0){
            int rem=q.remove();
            if(vis[rem]==true) return true;
            vis[rem] = true;
            for(int i:adj.get(rem)){
                if(vis[i]==false) q.add(i); 
            }
        }
        return false;
    }
    
    public boolean isCycleDFS(int src, int parent,
             ArrayList<ArrayList<Integer>> adj, boolean[] vis){

        vis[src]=true;
        
        for(int nbr:adj.get(src)){
            if(vis[nbr]==false){
                boolean cycleDetected=isCycleDFS(nbr,src,adj,vis);
                if(cycleDetected==true) return true;
            }
            else if(parent == nbr) continue;
            else return true;
        }
        
        return false;
    }
}