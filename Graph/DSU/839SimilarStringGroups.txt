class Solution {

    public class DSU{
        int[] parent;
        int[] ranks;
        
        DSU(int n){
            parent=new int[n];
            ranks=new int[n];
            Arrays.fill(parent,-1);
            Arrays.fill(ranks,1);
        }
        
        int find(int ele){
            if(parent[ele]==-1) return ele;
            return parent[ele] = find(parent[ele]); 
        }
        void union(int ele1, int ele2){
            int p1=find(ele1);
            int p2=find(ele2);
            if(p1==p2) return ;
            
            if(ranks[p1] > ranks[p2]){
                parent[p2] = p1;
                ranks[p1] += ranks[p2];
            }else{
                parent[p1] = p2;
                ranks[p2] += ranks[p1];
            }
            return;
        }
    }

    public int numSimilarGroups(String[] strs) {
        int n=strs.length;
        DSU set = new DSU(n);
        int noOfGroup = 0;

        for(int i=0;i<n;i++){
            String str1 = strs[i];
            for(int j=i+1;j<n;j++){
                String str2 = strs[j];
                if(isAnagram( str1, str2) == true) set.union(i,j);
            }
        }
        for(int i=0;i<n;i++){
            if(set.parent[i] == -1) noOfGroup++;
        }
        return noOfGroup;
    }

    public boolean isAnagram(String str1, String str2){
        int diff = 0;
        for(int i=0; i<str1.length(); i++){
            if(str1.charAt(i) != str2.charAt(i)) diff++;
        }

        if(diff == 2 || diff == 0) return true;
        return false;
    }
}