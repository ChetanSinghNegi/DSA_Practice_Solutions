import java.util.*;
public class Solution {

    public static class DSU{
        int[] parent;
        int[] ranks;

        DSU(int n){
            parent = new int[n];
            ranks = new int[n];
            Arrays.fill(parent,-1);
            Arrays.fill(ranks,1);
        }

        int find(int ele){
            if(parent[ele] == -1) return ele;
            parent[ele] = find(parent[ele]);
            return parent[ele];
        }
        void union(int ele1,int ele2){
            int pa1 = find(ele1);
            int pa2 = find(ele2);

            if(pa1 == pa2) return ;

            if(ranks[pa1] > ranks[pa2]){
                parent[pa2] = pa1;
                ranks[pa1] += ranks[pa2];
            }else{
                parent[pa1] = pa2;
                ranks[pa2] += ranks[pa1];
            }
        }
    } 
    
    static int[][] dir={{1,0},{-1,0},{0,1},{0,-1}};
    public static int[] numOfIslandsII(int rows, int cols, int[][] q) {
        // Write your code here.

        DSU set = new DSU(rows * cols);
        boolean[] vis = new boolean[rows * cols];
        int ans[] = new int[q.length];
        int noOfIsland = 0;

        for(int i=0;i<q.length;i++){
            int r = q[i][0];
            int c = q[i][1];

            int idx = r * cols + c;
            
            if(vis[idx] == true){  //aready a land so no need of increasing noOfIsland count
                ans[i] = noOfIsland;
                continue;
            } 

            vis[idx] = true;
            noOfIsland++;


            //checking neighbours
            for(int d=0;d<4;d++){
                int nr = dir[d][0] + r;
                int nc = dir[d][1] + c;

                int nIdx = nr * cols + nc;
                if(nr < 0 || nc < 0 || nr >= rows || nc >= cols ) continue;   //out of range w.r.t matrix
                if(vis[nIdx] == false) continue;     //water around

                if(set.find(idx) == set.find(nIdx)) continue;   //same set 

                else{  // different set so union them here with decrease in noOfIsland Count
                    set.union(idx, nIdx);  
                    noOfIsland--;
                }
            }
            ans[i] = noOfIsland;
        }
        return ans;

    }
}