class Solution {

    public class DSU{
        int[] parent;
        int[] ranks;
        
        DSU(int n){
            parent=new int[n];
            ranks=new int[n];
            Arrays.fill(parent,-1);
            Arrays.fill(ranks,1);
        }
        
        int find(int ele){
            if(parent[ele]==-1) return ele;
            return parent[ele] = find(parent[ele]); 
        }
        void union(int ele1, int ele2){
            int p1=find(ele1);
            int p2=find(ele2);
            if(p1==p2) return ;
            
            if(ranks[p1] > ranks[p2]){
                parent[p2] = p1;
                ranks[p1] += ranks[p2];
            }else{
                parent[p1] = p2;
                ranks[p2] += ranks[p1];
            }
            return;
        }
    }

    public boolean equationsPossible(String[] equations) {
        DSU set=new DSU(26);
        for(int i=0;i<equations.length;i++){
            String str=equations[i];
            if(str.charAt(1) == '='){
                set.union(str.charAt(0) - 'a', str.charAt(3) - 'a');
            }
        }
        for(int i=0;i<equations.length;i++){
            String str=equations[i];
            if(str.charAt(1) == '!'){
                if(set.find(str.charAt(0) - 'a') == set.find(str.charAt(3) - 'a')) return false;
            }
        }
        return true;
    }
}