class Solution {

    public class DSU{
        int[] parent;
        int[] ranks;
        
        DSU(int n){
            parent=new int[n];
            ranks=new int[n];
            Arrays.fill(parent,-1);
            Arrays.fill(ranks,1);
        }
        
        int find(int ele){
            if(parent[ele]==-1) return ele;
            return parent[ele] = find(parent[ele]); 
        }
        void union(int ele1, int ele2){
            int p1=find(ele1);
            int p2=find(ele2);
            if(p1==p2) return ;
            
            if(ranks[p1] > ranks[p2]){
                parent[p2] = p1;
                ranks[p1] += ranks[p2];
            }else{
                parent[p1] = p2;
                ranks[p2] += ranks[p1];
            }
            return;
        }
    }

    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        int n = s.length();
        DSU set = new DSU(n);

        // set of elements with respect to indexes
        for(List<Integer> pair:pairs){   
            set.union(pair.get(0),pair.get(1));
        }

        //parent to char of set elements
        HashMap<Integer,ArrayList<Character>> charHm = new HashMap<>();   
        //parent to idx of set elements
        HashMap<Integer,ArrayList<Integer>> idxHm = new HashMap<>();      
        

        for(int i=0;i<n;i++){
            int pa1 = set.find(i);
            char ch = s.charAt(i);

            //if not ArrayList initialized at new parent
            if(charHm.containsKey(pa1) == false){  
                charHm.put(pa1, new ArrayList<>());
                idxHm.put(pa1, new ArrayList<>());
            }
            
            charHm.get(pa1).add(ch);
            idxHm.get(pa1).add(i);
        }

        //sorting set chars acc to Lexicographical Order
        for(Integer parent : charHm.keySet()){
            Collections.sort(charHm.get(parent));
        }

        StringBuilder ans=new StringBuilder(s);
        for(Integer parent:charHm.keySet()){
            for(int i=0;i<charHm.get(parent).size();i++){
                char currChar = charHm.get(parent).get(i);
                int currIdx = idxHm.get(parent).get(i);
                ans.setCharAt(currIdx,currChar);
            }
        }

        return ans.toString();
    }
}