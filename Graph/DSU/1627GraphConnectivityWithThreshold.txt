class Solution {

    public class DSU{
        int[] parent;
        int[] ranks;
        
        DSU(int n){
            parent=new int[n];
            ranks=new int[n];
            Arrays.fill(parent,-1);
            Arrays.fill(ranks,1);
        }
        
        int find(int ele){
            if(parent[ele]==-1) return ele;
            return parent[ele] = find(parent[ele]); 
        }
        void union(int ele1, int ele2){
            int p1=find(ele1);
            int p2=find(ele2);
            if(p1==p2) return ;
            
            if(ranks[p1] > ranks[p2]){
                parent[p2] = p1;
                ranks[p1] += ranks[p2];
            }else{
                parent[p1] = p2;
                ranks[p2] += ranks[p1];
            }
            return;
        }
    }


    public int HCF(int a,int b){
        int num1 = a;
        int num2 = b;
        
        while (num2 != 0) {
            int temp = num2;
            num2 = num1 % num2;
            num1 = temp;
        }
        return num1;
    }
    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {
        DSU sets = new DSU(n+1);
        List<Boolean> ans = new ArrayList<>();
        for(int i=threshold+1;i<=n;i++){
            for(int j=i;j<=n;j+=i){
                int hcf = HCF(i,j);
                if(hcf>threshold){
                    sets.union(i,j); 
                }
            }
        }
        for(int i=0;i<queries.length;i++){
            if(sets.find(queries[i][0]) == sets.find(queries[i][1])){
                ans.add(true);
            }else{
                ans.add(false);
            }
        }
        return ans;
    }
}